{"version":3,"file":"index.js","sources":["../../../../src/components/Text/index.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport {\n  PolymorphicComponentPropsWithRef,\n  PolymorphicRef,\n} from '../../polymorphic-component-types';\nimport Box, { BaseBoxProps } from '../Box';\nimport { Breakpoints } from '../../breakpoints';\nimport styles from './Text.module.scss';\nimport clsx from 'clsx';\n\nexport type ButtonTextVariant = 'button-md' | 'button-md-emphasis' | 'button-sm';\n\nexport type HeadlineVariants =\n  | 'headline-display'\n  | 'headline-display-emphasis'\n  | 'headline-lg'\n  | 'headline-lg-emphasis'\n  | 'headline-md'\n  | 'headline-md-emphasis'\n  | 'headline-sm'\n  | 'headline-sm-emphasis';\n\nexport type Variant =\n  | HeadlineVariants\n  | 'body-lg'\n  | 'body-lg-emphasis'\n  | 'body-lg-paragraph'\n  | 'body-lg-paragraph-emphasis'\n  | 'body-md'\n  | 'body-md-emphasis'\n  | 'body-md-paragraph'\n  | 'body-md-paragraph-emphasis'\n  | 'body-sm'\n  | 'body-sm-emphasis'\n  | 'body-sm-paragraph'\n  | 'body-sm-paragraph-emphasis'\n  | 'body-xs'\n  | 'body-xs-emphasis'\n  | 'body-xs-paragraph'\n  | 'body-xs-paragraph-emphasis'\n  | ButtonTextVariant;\n\nexport interface BaseTextProps extends BaseBoxProps {\n  /** Write a prop description. */\n  variant?: Variant | Breakpoints<Variant>;\n  /** When set to true, the text is bolded. */\n  emphasis?: boolean;\n}\n\ntype TextProps<C extends React.ElementType> = PolymorphicComponentPropsWithRef<C, BaseTextProps>;\n\ntype TextComponent = <C extends React.ElementType = 'span'>(\n  props: TextProps<C>,\n) => React.ReactElement<TextProps<C>> | null;\n\ntype BreakpointsPrefix = 'lg-' | 'md-' | 'sm-' | '';\n\nfunction getParsedClassNames(value: Variant, prefix: BreakpointsPrefix = '') {\n  const variant = value.split('-emphasis')[0];\n  const variantClassName = styles[`${prefix}${variant}` as keyof typeof styles];\n\n  const emphasisClassName = value.includes('emphasis')\n    ? styles[`${prefix}emphasis` as keyof typeof styles]\n    : undefined;\n  return [variantClassName, emphasisClassName];\n}\n\nfunction getVariantClasses(value?: Variant | Breakpoints<Variant>) {\n  if (typeof value == 'undefined') {\n    return '';\n  }\n\n  if (typeof value === 'string') {\n    return getParsedClassNames(value);\n  }\n\n  if (value && typeof value === 'object') {\n    return [\n      value.sm && getParsedClassNames(value.sm, 'sm-'),\n      value.md && getParsedClassNames(value.md, 'md-'),\n      value.lg && getParsedClassNames(value.lg, 'lg-'),\n    ];\n  }\n\n  return undefined;\n}\n\nconst Text: TextComponent = forwardRef(function Text<C extends React.ElementType = 'span'>(\n  { as, children, variant, emphasis = false, ...rest }: TextProps<C>,\n  ref?: PolymorphicRef<C>,\n) {\n  const component: React.ElementType = as || 'span';\n  const className = clsx(rest.className, getVariantClasses(variant), {\n    [styles.font]: variant,\n    [styles.emphasis]: emphasis,\n  });\n\n  return (\n    <Box as={component} ref={ref} {...rest} className={className}>\n      {children}\n    </Box>\n  );\n});\n\nexport default Text as typeof Text;\n"],"names":["getParsedClassNames","value","prefix","variant","split","variantClassName","styles","emphasisClassName","includes","undefined","getVariantClasses","sm","md","lg","Text","forwardRef","_a","ref","as","children","emphasis","rest","__rest","component","className","clsx","font","React","createElement","Box","_extends"],"mappings":";;;;;;;AAyDA,SAASA,mBAAmBA,CAACC,KAAc,EAAEC,SAA4B,EAAE,EAAA;EACzE,MAAMC,OAAO,GAAGF,KAAK,CAACG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;EAC3C,MAAMC,gBAAgB,GAAGC,MAAM,CAAC,GAAGJ,MAAM,CAAA,EAAGC,OAAO,CAAA,CAAyB,CAAC;AAE7E,EAAA,MAAMI,iBAAiB,GAAGN,KAAK,CAACO,QAAQ,CAAC,UAAU,CAAC,GAChDF,MAAM,CAAC,CAAGJ,EAAAA,MAAM,CAAiC,QAAA,CAAA,CAAC,GAClDO,SAAS;AACb,EAAA,OAAO,CAACJ,gBAAgB,EAAEE,iBAAiB,CAAC;AAC9C;AAEA,SAASG,iBAAiBA,CAACT,KAAsC,EAAA;AAC/D,EAAA,IAAI,OAAOA,KAAK,IAAI,WAAW,EAAE;AAC/B,IAAA,OAAO,EAAE;AACX;AAEA,EAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOD,mBAAmB,CAACC,KAAK,CAAC;AACnC;AAEA,EAAA,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;AACtC,IAAA,OAAO,CACLA,KAAK,CAACU,EAAE,IAAIX,mBAAmB,CAACC,KAAK,CAACU,EAAE,EAAE,KAAK,CAAC,EAChDV,KAAK,CAACW,EAAE,IAAIZ,mBAAmB,CAACC,KAAK,CAACW,EAAE,EAAE,KAAK,CAAC,EAChDX,KAAK,CAACY,EAAE,IAAIb,mBAAmB,CAACC,KAAK,CAACY,EAAE,EAAE,KAAK,CAAC,CACjD;AACH;AAEA,EAAA,OAAOJ,SAAS;AAClB;AAEMK,MAAAA,IAAI,gBAAkBC,UAAU,CAAC,SAASD,IAAIA,CAClDE,EAAkE,EAClEC,GAAuB,EAAA;EADvB,IAAA;MAAEC,EAAE;MAAEC,QAAQ;MAAEhB,OAAO;AAAEiB,MAAAA,QAAQ,GAAG;AAA8B,KAAA,GAAAJ,EAAA;AAApBK,IAAAA,IAAI,GAAAC,MAAA,CAAAN,EAAA,EAAlD,yCAAoD,CAAF;AAGlD,EAAA,MAAMO,SAAS,GAAsBL,EAAE,IAAI,MAAM;AACjD,EAAA,MAAMM,SAAS,GAAGC,IAAI,CAACJ,IAAI,CAACG,SAAS,EAAEd,iBAAiB,CAACP,OAAO,CAAC,EAAE;AACjE,IAAA,CAACG,MAAM,CAACoB,IAAI,GAAGvB,OAAO;IACtB,CAACG,MAAM,CAACc,QAAQ,GAAGA;AACpB,GAAA,CAAC;AAEF,EAAA,oBACEO,KAAA,CAAAC,aAAA,CAACC,GAAG,EAAAC,QAAA,CAAA;AAACZ,IAAAA,EAAE,EAAEK,SAAU;AAACN,IAAAA,GAAG,EAAEA;AAAI,GAAA,EAAKI,IAAI,EAAA;AAAEG,IAAAA,SAAS,EAAEA;AAAU,GAAA,CAAA,EAC1DL,QACE,CAAC;AAEV,CAAC;;;;"}