{"version":3,"file":"FloatingText.js","sources":["../../../../src/components/FieldWrapper/FloatingText.tsx"],"sourcesContent":["import getStateColors from './getStateColors';\nimport styles from './FloatingText.module.scss';\nimport clsx from 'clsx';\nimport Text from '../Text';\nimport React from 'react';\ninterface Props {\n  hasError: boolean;\n  disabled?: boolean;\n  htmlFor: string;\n  isFieldFocused: boolean;\n  isOptional?: boolean;\n  hasIcon?: boolean;\n  multiline?: boolean;\n  stayAfloat?: boolean;\n  floatAlign?: 'left' | 'center';\n  children: React.ReactNode;\n}\n\nconst FloatingText = ({\n  hasError = false,\n  disabled,\n  isFieldFocused,\n  hasIcon = false,\n  multiline = false,\n  stayAfloat = false,\n  floatAlign = 'left',\n  children,\n  isOptional = false,\n  htmlFor,\n}: Props) => {\n  const floatingClasses = clsx(\n    styles['floating-text'],\n    multiline ? styles.multiline : styles['single-line'],\n    {\n      [styles['stay-afloat']]: stayAfloat,\n      [styles.error]: hasError,\n    },\n  );\n\n  const labelClasses = clsx(floatingClasses, styles[floatAlign]);\n  const optionalClasses = clsx(floatingClasses, styles.optional, {\n    [styles['has-icon']]: hasIcon,\n  });\n\n  const colors = getStateColors({ hasError, disabled, isFieldFocused });\n\n  return (\n    <>\n      <Text\n        as=\"label\"\n        htmlFor={htmlFor}\n        id={`${htmlFor}-label`}\n        variant=\"body-md\"\n        paddingX={50}\n        className={labelClasses}\n        color={colors.text}\n      >\n        {children}\n      </Text>\n      {isOptional && (\n        <Text\n          as=\"label\"\n          htmlFor={htmlFor}\n          aria-hidden\n          variant=\"body-md\"\n          color={colors.text}\n          paddingX={50}\n          className={optionalClasses}\n        >\n          Optional\n        </Text>\n      )}\n    </>\n  );\n};\n\nexport default FloatingText;\n"],"names":["FloatingText","hasError","disabled","isFieldFocused","hasIcon","multiline","stayAfloat","floatAlign","children","isOptional","htmlFor","floatingClasses","clsx","styles","error","labelClasses","optionalClasses","optional","colors","getStateColors","React","createElement","Fragment","Text","as","id","variant","paddingX","className","color","text"],"mappings":";;;;;;AAkBMA,MAAAA,YAAY,GAAGA,CAAC;AACpBC,EAAAA,QAAQ,GAAG,KAAK;EAChBC,QAAQ;EACRC,cAAc;AACdC,EAAAA,OAAO,GAAG,KAAK;AACfC,EAAAA,SAAS,GAAG,KAAK;AACjBC,EAAAA,UAAU,GAAG,KAAK;AAClBC,EAAAA,UAAU,GAAG,MAAM;EACnBC,QAAQ;AACRC,EAAAA,UAAU,GAAG,KAAK;AAClBC,EAAAA;AAAO,CACD,KAAI;AACV,EAAA,MAAMC,eAAe,GAAGC,IAAI,CAC1BC,MAAM,CAAC,eAAe,CAAC,EACvBR,SAAS,GAAGQ,MAAM,CAACR,SAAS,GAAGQ,MAAM,CAAC,aAAa,CAAC,EACpD;AACE,IAAA,CAACA,MAAM,CAAC,aAAa,CAAC,GAAGP,UAAU;IACnC,CAACO,MAAM,CAACC,KAAK,GAAGb;AACjB,GAAA,CACF;EAED,MAAMc,YAAY,GAAGH,IAAI,CAACD,eAAe,EAAEE,MAAM,CAACN,UAAU,CAAC,CAAC;EAC9D,MAAMS,eAAe,GAAGJ,IAAI,CAACD,eAAe,EAAEE,MAAM,CAACI,QAAQ,EAAE;AAC7D,IAAA,CAACJ,MAAM,CAAC,UAAU,CAAC,GAAGT;AACvB,GAAA,CAAC;EAEF,MAAMc,MAAM,GAAGC,cAAc,CAAC;IAAElB,QAAQ;IAAEC,QAAQ;AAAEC,IAAAA;AAAgB,GAAA,CAAC;AAErE,EAAA,oBACEiB,KAAA,CAAAC,aAAA,CAAAD,KAAA,CAAAE,QAAA,EAAA,IAAA,eACEF,KAAA,CAAAC,aAAA,CAACE,IAAI,EAAA;AACHC,IAAAA,EAAE,EAAC,OAAO;AACVd,IAAAA,OAAO,EAAEA,OAAQ;IACjBe,EAAE,EAAE,CAAGf,EAAAA,OAAO,CAAS,MAAA,CAAA;AACvBgB,IAAAA,OAAO,EAAC,SAAS;AACjBC,IAAAA,QAAQ,EAAE,EAAG;AACbC,IAAAA,SAAS,EAAEb,YAAa;IACxBc,KAAK,EAAEX,MAAM,CAACY;GAEbtB,EAAAA,QACG,CACN,EAACC,UAAU,iBACTW,KAAA,CAAAC,aAAA,CAACE,IAAI,EAAA;AACHC,IAAAA,EAAE,EAAC,OAAO;AACVd,IAAAA,OAAO,EAAEA,OAAQ;IACjB,aAAW,EAAA,IAAA;AACXgB,IAAAA,OAAO,EAAC,SAAS;IACjBG,KAAK,EAAEX,MAAM,CAACY,IAAK;AACnBH,IAAAA,QAAQ,EAAE,EAAG;AACbC,IAAAA,SAAS,EAAEZ;GAEX,EAAA,UACI,CAEV,CAAG;AAEP;;;;"}